---
title: "Client Report - Late flights and missing data"
subtitle: "Course DS 250"
author: "Jared Linares"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---


```{python}

import pandas as pd
import altair as alt
import numpy as np

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
from IPython.core.display import HTML
```


## Elevator pitch

_We studied flight delay data at airports and found out what causes delays and how often they happen. We fixed missing information in the data and calculated how many delays were due to weather. We found that SFO airport had the most weather-related delays and IAD had the least. This information can help airlines and airports reduce flight disruptions and improve the passenger experience._


```{python}
url = "https://raw.githubusercontent.com/byuidatascience/data4missing/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)
df.to_csv("flights_missing_original.csv", index=False)

df = df.replace({
    'airport_name': '',
    'minutes_delayed_carrier': '',
    'num_of_delays_carrier': '1500+',
    'num_of_delays_late_aircraft': -999,
    'minutes_delayed_nas': [-999, ''],
    'year': '',
    'month': 'n/a'
}, np.nan)

airport_dict = {
    'ATL': 'Atlanta, GA: Hartsfield-Jackson Atlanta International',
    'DEN': 'Denver, CO: Denver International',
    'IAD': 'Washington, DC: Washington Dulles International',
    'ORD': "Chicago, IL: Chicago O'Hare International",
    'SAN': 'San Diego, CA: San Diego International',
    'SFO': 'San Francisco, CA: San Francisco International',
    'SLC': 'Salt Lake City, UT: Salt Lake City International'
}
```

__Highlight the grand questions__

## GRAND QUESTION 1

__Which airport has the worst delays?__

_The airport with the worst delays is O'Hare International Airport in Chicago. I found this by looking at how much total time flights were delayed at each airport. This is a better way to measure the impact of delays because it takes into account both how often flights are delayed and how long each delay is. It gives a clearer picture of which airports need the most help to reduce delays and improve their operations._


```{python}

df['airport_name'] = df['airport_name'].fillna(df['airport_code'].map(airport_dict))

df.to_csv("flights_missing.csv", index=False)

df = df.assign(hours_delayed_total = df.minutes_delayed_total / 60)

summary_table = df.groupby("airport_code").agg(
    total_num_flights = ('num_of_flights_total', 'sum'),
    total_delay_flights = ('num_of_delays_total', 'sum'),
    avg_delay_hours = ('hours_delayed_total', 'mean'),
).assign(
    prop_delayed_flights = lambda x: x.total_delay_flights / x.total_num_flights
).sort_values('prop_delayed_flights', ascending=False)
display(HTML(summary_table.to_html()))

```

_The boxplot below shows a greater than average delay time at ORD, when compared with many other airports. This would suggest that this airport is more prone to delays than other airports._

```{python}
df = df.assign(average_delay_time = df.minutes_delayed_total / df.num_of_delays_total)
title = 'Average Delay Time per Flight by Airport'
alt.Chart(df).mark_boxplot().encode(
    x=alt.X("average_delay_time:Q", title='Average Delay Time (minutes)'),
    y=alt.Y("airport_code:N", sort=alt.EncodingSortField(field='average_delay_time', order='descending'), axis=alt.Axis(title='Airport Code')),
    color=alt.Color('airport_code:N'),
)
```


## GRAND QUESTION 2

__What is the best month to fly if you want to avoid delays of any length?__

_According to the data, November is the best month to fly if you want to avoid delays. It has the shortest delay time with 11,112,089 minutes (185,201 hours). The month with the longest delay is July with 20465456 minutes (341,090 hours), which is nearly double November's delay. September and October are also good months to fly, but you may want to be careful with delays in June and December._


```{python}
# GQ2/GQ5 - data corrections
df['month'] = df['month'].replace('Febuary', 'February') 
month_df = df.dropna(subset=['month']) 

monthly_avg_delay = month_df.groupby('month')['minutes_delayed_total', 'num_of_delays_total'].sum()

monthly_avg_delay['avg_delay_time'] = monthly_avg_delay['minutes_delayed_total'] / monthly_avg_delay['num_of_delays_total']

chart = alt.Chart(monthly_avg_delay.reset_index()).mark_bar().encode(
    x=alt.X('month:O', sort=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], axis=alt.Axis(title='Month')),
    y=alt.Y('avg_delay_time:Q', axis=alt.Axis(title='Average Delay Time (minutes)')),
    color=alt.Color('month:N'),
)

chart.title = 'Average Delay Time per Flight by Month'
chart
```

_The bar chart shows that September, October, and November have fewer delays compared to the other months._

```{python}
monthly_avg_delay = monthly_avg_delay.sort_values(by=['avg_delay_time'], ascending=False)
display(HTML(monthly_avg_delay.to_html()))
```

## GRAND QUESTION 3

__Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__
    
__1) All delayed flights in the "Weather" category are caused by weather.__
__2) 30% of the delayed flights in the "Late-Arriving" category are caused by weather.__
__3) From April to August, 40% of the delayed flights in the "NAS" category are caused by weather, but from other months the proportion increases to 65%.__



```{python}
#%%
mean_late_aircraft = df['num_of_delays_late_aircraft'].mean()
df['num_of_delays_late_aircraft'] = df['num_of_delays_late_aircraft'].replace(np.nan, mean_late_aircraft)

#%%


df['weather_delay'] = 0



nas_weather = np.where(df['month'].isin(['April', 'May', 'June', 'July', 'August']), df['num_of_delays_nas'] * 0.4, df['num_of_delays_nas'] * 0.65)

df['weather_delay'] += nas_weather + df['num_of_delays_weather'] + df['num_of_delays_late_aircraft'] * .3

df['weather_delay'].head(5)

df.to_csv("flights_missing.csv", index=False)

df[['weather_delay', 'month', 'num_of_delays_weather', 'num_of_delays_late_aircraft', 'num_of_delays_nas']].head(5)
```



## GRAND QUESTION 4

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.__
    

_The graph displays the proportion of weather-related delays for each airport in the dataset. The x-axis shows the airport codes sorted by the proportion of delayed flights due to weather in descending order, while the y-axis displays the proportion of delayed flights due to weather as a percentage. The graph indicates significant variation in the proportion of weather-related delays across different airports, highlighting the impact of weather patterns and conditions on flight delays and disruptions. The data can be useful for airlines and airport authorities to understand which airports are more susceptible to weather-related delays and develop strategies to mitigate the impact of weather on flight operations._


```{python}
weather_delay_prop = df.groupby('airport_code')['weather_delay', 'num_of_delays_total'].sum()
weather_delay_prop['prop_weather_delay'] = weather_delay_prop['weather_delay'] / weather_delay_prop['num_of_delays_total']
weather_delay_prop.reset_index(inplace=True)
weather_delay_prop.sort_values(by=['prop_weather_delay'], ascending=False)

bars = alt.Chart(weather_delay_prop).mark_bar().encode(
    x=alt.X('airport_code:N', title='Airport Code', sort=alt.EncodingSortField(field='prop_weather_delay', order='descending')),
    y=alt.Y('prop_weather_delay:Q', axis=alt.Axis(format='%', title='Proportion of Delayed Flights Due to Weather')),
    color=alt.Color('airport_code:N', legend=None)
).properties(title='Proportion of Delayed Flights Due to Weather by Airport')

bars
```


## GRAND QUESTION 5

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__

_The data was cleaned by replacing missing values with "NaN". Here's an example row with the "airport-name" and "minutes-delayed-carrier" values replaced with "NaN". Additionally, in earlier parts of the project code was cleaned in the code to ensure that everything worked without errors._
    


```{python}
nan_year_rows = df.loc[df['year'].isna()]
nan_year_rows.head(1)

# additional examples of data cleaning

#df['month'] = df['month'].replace('Febuary', 'February') 
#month_df = df.dropna(subset=['month']) 
#missing/incorrect values however: airport_name(''), minutes_delayed_carrier(''), num_of_delays_carrier('1500+'), num_of_delays_late_aircraft(-999), minutes_delayed_nas(-999 and ''), year(''), and month('n/a').
# df = df.replace({
#     'airport_name': '',
#     'minutes_delayed_carrier': '',
#     'num_of_delays_carrier': '1500+',
#     'num_of_delays_late_aircraft': -999,
#     'minutes_delayed_nas': [-999, ''],
#     'year': '',
#     'month': 'n/a'
# }, np.nan)

# airport_dict = {
#     'ATL': 'Atlanta, GA: Hartsfield-Jackson Atlanta International',
#     'DEN': 'Denver, CO: Denver International',
#     'IAD': 'Washington, DC: Washington Dulles International',
#     'ORD': "Chicago, IL: Chicago O'Hare International",
#     'SAN': 'San Diego, CA: San Diego International',
#     'SFO': 'San Francisco, CA: San Francisco International',
#     'SLC': 'Salt Lake City, UT: Salt Lake City International'
# }
```
